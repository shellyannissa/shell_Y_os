
alias functionNum R1;

//GET FREE PAGE
if(functionNum == 1)then 
    //increment wait_mem_count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    //while mem_free_count is 0
    while([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_MEM;
        multipush(R1);
        call MOD_5;
        multipop(R1);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    alias memFreeIndex R2;
    //available pages for user processes are from 76 to 127
    memFreeIndex = 76;
    
    while(([MEMORY_FREE_LIST + memFreeIndex] > 0) && (memFreeIndex <= 127)) do
        memFreeIndex = memFreeIndex + 1;
    endwhile;

    [MEMORY_FREE_LIST + memFreeIndex] = 1;
    alias currMemUsage R12;
    currMemUsage = 128 - [SYSTEM_STATUS_TABLE + 2];
    if(currMemUsage > [MAX_MEM_USAGE_COUNT]) then   
        [MAX_MEM_USAGE_COUNT] = currMemUsage;
    endif;
    R0 = memFreeIndex;
    return ;

endif;

//release page num
if(functionNum ==2) then
    alias pageNum R2;
    //dec no of proc using this page 
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] -1; 
    if([MEMORY_FREE_LIST + pageNum] == 0) then
        //increment mem_free_count
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    alias i R3;
    i = 1;
    while(i < 16) do 
        if([PROCESS_TABLE + 16 * i + 4] == WAIT_MEM) then
            if(([PROCESS_TABLE + 16 * i + 1] > 0) && 
                ([PROCESS_TABLE + 16 * i + 1] < 16) 
                ) then
                    [PROCESS_TABLE + 16 * i + 4] = READY;
            endif;
        endif;
    i = i + 1;
    endwhile;

    return ;
endif;

if(functionNum == 5) then
	alias blockNum R2; 
	alias i R3;
	alias j R4;
	alias pageNo R5;
	i=0;
	while(i<15) do
	  j=4;
	  while(j<8) do
	    if([DISK_MAP_TABLE + 10*i + j] == blockNum) then
	      pageNo = [PAGE_TABLE_BASE + 20*i + 8 + 2*(j-4)];
	      if(pageNo != -1) then
		[MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] + 1;
		R0 = pageNo;
		return;	
	      endif;
	    endif;
	  j = j + 1;
	  endwhile;
	i = i + 1;
	endwhile;
	multipush(R1, R2);
	R1 = 1;
	call MOD_2;
	pageNo = R0;
	multipop(R1, R2);
	multipush(R1, R2, R5);
	R1 = 2;
	R4 = R2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = pageNo;
	breakpoint;
	call MOD_4;
	multipop(R1, R2, R5);
	R0 = pageNo;
	return;
	
endif;



//Release Block
if(functionNum == 4) then            
	alias blockNum R2;
	[DISK_FREE_LIST + blockNum] = [DISK_FREE_LIST + blockNum] -1;
	return;
endif;

if(functionNum == GET_FREE_BLOCK) then
  alias i R2;
  i = DISK_FREE_AREA;
  while(i<DISK_SWAP_AREA) do
    if([DISK_FREE_LIST + i] == 0) then
      [DISK_FREE_LIST + i] = 1;
      break;
    endif;
    i = i + 1;
  endwhile;
  if(i == DISK_SWAP_AREA) then
    R0 = -1;
    return;
  endif;
  R0 = i;
  return;

endif;

if(functionNum == GET_SWAP_BLOCK) then
    // Arguements are NIL
    // Returns blockNumber
    
    // loop through entries in the Disk Free List from DISK_SWAP_AREA to DISK_SIZE - 1    (swap area )
    alias iter R2;
    R0 = -1;
    iter = 0;
    while(DISK_SWAP_AREA +iter < DISK_SIZE) do
        if([DISK_FREE_LIST+DISK_SWAP_AREA +iter] == 0) then
            [DISK_FREE_LIST+DISK_SWAP_AREA +iter]=1;
            R0 = DISK_SWAP_AREA+iter;
            break;
        endif;
        iter = iter +1;
    endwhile;
    return;
endif;
