//extracting system call number and switching to kernel stack
alias userSP R1;
userSP = SP;


alias currPID R2;
currPID = [SYSTEM_STATUS_TABLE + 1];

alias procTab R3;
procTab = PROCESS_TABLE + 16*currPID;

alias syscall R4;
syscall = [[PTBR + 2*(userSP-5)/512]*512 + (userSP-5)%512];

[procTab + 9] = syscall;
[procTab + 13] = SP;
SP = [procTab + 11]*512 -1;


//locking semaphore
if(syscall == 19) then
  alias semid R5;
  alias resTab R6;
  resTab = (([procTab + 11]+1)*512)-16;
  semid = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
  if(semid<0 || semid>7 || [resTab + 2*semid] != SEMAPHORE) then
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
    SP = userSP;
    [procTab + 9] = 0;
    ireturn;
  endif;
  alias semindex R7;
  semindex = [resTab + 2*semid + 1];
  while([SEMAPHORE_TABLE + semindex*4] != -1 && [SEMAPHORE_TABLE + semindex*4] != currPID) do
    [procTab + 4] = WAIT_SEMAPHORE;
    [procTab + 5] = semindex;
    multipush(R1, R2, R3, R4, R5, R6, R7);
    call MOD_5;
    multipop(R1, R2, R3, R4, R5, R6, R7);
  endwhile;
  [SEMAPHORE_TABLE + semindex*4] = currPID;
  [procTab + 9] = 0;
  SP = userSP;
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
  ireturn;
endif;


//unlocking semaphore
if(syscall == 20) then
  alias semid R5; 
  alias resTab R6;
  resTab = ([procTab+11]+1)*512 - 16;
  semid = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
  if(semid<0 || semid>7 || [resTab + 2*semid] != 1) then
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1;
    SP = userSP;
    [procTab + 9] = 0;
    ireturn;
  endif;
  
  alias semindex R7;
  semindex = [resTab + 2*semid + 1];

  //return -2 if semaphore locked by some other process
  if([SEMAPHORE_TABLE+ 4*semindex] != -1) then
    if([SEMAPHORE_TABLE + 4*semindex] != currPID) then 
      [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -2;
      SP = userSP;
      [procTab + 9] = 0;
      ireturn;
    endif;

    //waking the processes that are in waiting state
    [SEMAPHORE_TABLE + 4*semindex] = -1;
    alias i R8;
    i = 1;
    while(i<16) do
      alias procTable R9;
        procTable = PROCESS_TABLE + 16*i;
        if([procTable + 4] == WAIT_SEMAPHORE && [procTable + 5] == semindex) then
          [procTable + 4] = READY;
          [procTable + 5] = -1;
        endif;
    i = i + 1;
    endwhile;
  endif;

  [procTab + 9] = 0;
  SP = userSP; 
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
  ireturn;
endif;