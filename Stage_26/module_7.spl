// loading exception handler
loadi(2, 15);
loadi(3, 16);

// loading timer interrupt
loadi(4, 17);
loadi(5, 18);

// loading scheduler module
loadi(50, 63);
loadi(51, 64);

// loading Write interrupt
loadi(16, 29);
loadi(17, 30);

// loading Console Interrupt
loadi(8,21);
loadi(9,22);

// loading Disk Interrupt
loadi(6, 19);
loadi(7, 20);

// loading INT 4
loadi(10, 23);
loadi(11, 24);

//loading INT 5
loadi(12, 25);
loadi(13, 26);

// loading Read Interrupt (INT 6)
loadi(14, 27);
loadi(15, 28);

// loading INT 8
loadi(18, 31);
loadi(19, 32);

// loading INT 9
loadi(20, 33);
loadi(21, 34);

//loading INT 10
loadi(22, 35);
loadi(23, 36);

//loading INT 11
loadi(24, 37);
loadi(25, 38);

//loading INT 12
loadi(26, 39);
loadi(27, 40);

//loading INT 13
loadi(28, 41);
loadi(29, 42);

//loading INT 14
loadi(30, 43);
loadi(31, 44);

//loaing INT 15
loadi(32, 45);
loadi(33, 46);

//loading INT 16
loadi(34, 47);
loadi(35, 48);

//loading INT 17
loadi(36, 49);
loadi(37, 50);

// loading MOD 0
loadi(40, 53);
loadi(41, 54);
 

// loading MOD_1
loadi(42, 55);
loadi(43, 56);

// loading MOD_2
loadi(44, 57);
loadi(45, 58);

//loading MOD_3
loadi(46, 59);
loadi(47, 60);

// loading mod_4 
loadi(48, 61);
loadi(49, 62);

// loading Library
loadi(63, 13);
loadi(64, 14);

// loading INIT process
loadi(65, 7);

//loading Shell process
loadi(67, 9);
loadi(68, 10);

// loading inodetable
loadi(59, 3);
loadi(60, 4);

// load diskFree List
loadi(61, 2);

// loading Root file
loadi(62, 5);


alias i R0;
i=0;
while(i<128) do
	if(i<76) then
		[MEMORY_FREE_LIST + i] = 1;
	else
		[MEMORY_FREE_LIST + i] = 0;
	endif;
	i = i + 1;
endwhile;




PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 11] = 77;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;

[PROCESS_TABLE + 16 + 4] = CREATED;
[66*512] = [65*512 + 1];


[MEMORY_FREE_LIST + 76] = 1;

//Initialize per process table 
i = 1;
while(i<=8) do
	[([PROCESS_TABLE + 16 + 11] + 1)*512 - 2*i] = -1;
	i = i + 1;
endwhile;

//Initialize semaphore table
i = 0;
while(i < 32) do 
	[SEMAPHORE_TABLE + 4 * i] = -1;
	[SEMAPHORE_TABLE + 4 * i + 1] = 0;
	i = i + 1;
endwhile;




// Inititalize File Status Table
i=0;
while(i<MAX_FILE_NUM) do
  [FILE_STATUS_TABLE + 4*i] = -1;
  [FILE_STATUS_TABLE + 4*i + 1] = -1;
  i = i + 1;
endwhile;

// Initialize Open file table
i=0;
while(i<MAX_OPENFILE_NUM) do
  [OPEN_FILE_TABLE + 4*i] = -1;
  [OPEN_FILE_TABLE + 4*i + 1] = 0;
i = i + 1;
endwhile;

// Initialize Buffer Table
i = 0;
while(i<MAX_BUFFER) do
  [BUFFER_TABLE + 4*i] = -1;
  [BUFFER_TABLE + 4*i + 1] = 0;
  [BUFFER_TABLE + 4*i + 2] = -1;
  i = i + 1;
endwhile;

// Set userID for INIT
[PROCESS_TABLE + 16 + 3] = 1;


//Shell process PID = 2
PTBR = PAGE_TABLE_BASE + 2*20;
PTLR = 10;


[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";
[PTBR+8] = 67;
[PTBR+9] = "0100";
[PTBR+10] = 68;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

[PROCESS_TABLE + 33] = 2;
[PROCESS_TABLE + 43] = 80;
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 45] = 8*512;
[PROCESS_TABLE + 46] = PTBR;
[PROCESS_TABLE + 47] = PTLR;
[PROCESS_TABLE + 38] = 1;

[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;

[PROCESS_TABLE + 36] = TERMINATED;
[78*512] = [67*512 + 1];

// Initialize disk map table for SHELL
[DISK_MAP_TABLE + 20 + 2] = -1;
[DISK_MAP_TABLE + 20 + 3] = -1;
[DISK_MAP_TABLE + 20 + 4] = 9;
[DISK_MAP_TABLE + 20 + 5] = 10;
[DISK_MAP_TABLE + 20 + 6] = -1;
[DISK_MAP_TABLE + 20 + 7] = -1;
[DISK_MAP_TABLE + 20 + 8] = -1;
[DISK_MAP_TABLE + 20 + 9] = -1;

i=2;
while(i<MAX_PROC_NUM) do
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	i = i+ 1;
endwhile;

[TERMINAL_STATUS_TABLE + 0] = 0;
[DISK_STATUS_TABLE + 0] = 0;
[SYSTEM_STATUS_TABLE + 2] = 47;
[SYSTEM_STATUS_TABLE + 3] = 0;

return;
  

