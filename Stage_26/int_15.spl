// Shutdown system call - 21
breakpoint;
alias userSP R1;
userSP = SP;

alias currPID R2;
currPID = [SYSTEM_STATUS_TABLE + 1];

alias procTab R3;
procTab = PROCESS_TABLE + 16*currPID;

[procTab + 9] = 21;
[procTab + 13] = userSP;
SP = [procTab + 11]*512 -1;

if(currPID != 2 || [procTab + 3] != 1) then
  R11 = -1;
  goto retLabel;
endif;

multipush(R1, R2, R3);
R1 = KILL_ALL;
R2 = currPID;
call PROCESS_MANAGER;
multipop(R1, R2, R3);

alias i R4;
i=0;
while(i<4) do
  breakpoint;
  if([BUFFER_TABLE + 4*i + 1] == 1) then
    multipush(R1, R2, R3, R4);
    R1 = DISK_STORE;
    R2 = currPID;
    R3 = BUFFER_BASE + i;
    R4 = [BUFFER_TABLE + 4*i];
    call DEVICE_MANAGER;
    multipop(R1, R2, R3, R4);
  endif;
i = i + 1;
endwhile;


// Storing INODE, Disk Free List and root table back to disk

multipush(R1, R2, R3);
R1 = 1;
R2 = currPID;
R3 = 59;
R4 = 3;
call MOD_4;
multipop(R1, R2, R3);
multipush(R1, R2, R3);
R1 = 1;
R2 = currPID;
R3 = 60;
R4 = 4;
call MOD_4;
multipop(R1, R2, R3);
multipush(R1, R2, R3);
R1 = 1;
R2 = currPID;
R3 = 61;
R4 = 2;
call MOD_4;
multipop(R1, R2, R3);
R1 = 1;
R2 = currPID;
R3 = 62;
R4 = 5;
call MOD_4;
multipop(R1, R2, R3);



halt;


retLabel:
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = R11;
  SP = [procTab + 13];
  [procTab + 9] = 0;
  ireturn;